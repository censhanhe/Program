#ifndef 	__GAIA_MATH_CAL_H__
#define 	__GAIA_MATH_CAL_H__

namespace GAIA
{
	namespace MATH
	{
		GAIA_ENUM_BEGIN(CALOP)
			CALOP_ADD,
			CALOP_SUB,
			CALOP_MUL,
			CALOP_DIV,
			CALOP_MOD,
			CALOP_SQRT,
			CALOP_POW,
			CALOP_LOG,
			CALOP_LN,
			CALOP_SIN,
			CALOP_COS,
			CALOP_TAN,
			CALOP_ATAN2,
			CALOP_ASIN,
			CALOP_ACOS,
			CALOP_RANDOM,
			CALOP_RANDOMF,
			CALOP_ABS,
			CALOP_CLAMP,
			CALOP_MAX,
			CALOP_MIN,
			CALOP_SIGN,
			CALOP_FLOOR,
			CALOP_CEIL,
			CALOP_ROUND,
		GAIA_ENUM_END(CALOP)
		static const GAIA::CH* CALOP_STRINGA[] = 
		{
			"CALOP_INVALID",
			"CALOP_ADD",
			"CALOP_SUB",
			"CALOP_MUL",
			"CALOP_DIV",
			"CALOP_MOD",
			"CALOP_SQRT",
			"CALOP_POW",
			"CALOP_LOG",
			"CALOP_LN",
			"CALOP_SIN",
			"CALOP_COS",
			"CALOP_TAN",
			"CALOP_ATAN2",
			"CALOP_ASIN",
			"CALOP_ACOS",
			"CALOP_RANDOM",
			"CALOP_RANDOMF",
			"CALOP_ABS",
			"CALOP_CLAMP",
			"CALOP_MAX",
			"CALOP_MIN",
			"CALOP_SIGN",
			"CALOP_FLOOR",
			"CALOP_CEIL",
			"CALOP_ROUND",
		};
		static const GAIA::WCH* CALOP_STRINGW[] = 
		{
			L"CALOP_INVALID",
			L"CALOP_ADD",
			L"CALOP_SUB",
			L"CALOP_MUL",
			L"CALOP_DIV",
			L"CALOP_MOD",
			L"CALOP_SQRT",
			L"CALOP_POW",
			L"CALOP_LOG",
			L"CALOP_LN",
			L"CALOP_SIN",
			L"CALOP_COS",
			L"CALOP_TAN",
			L"CALOP_ATAN2",
			L"CALOP_ASIN",
			L"CALOP_ACOS",
			L"CALOP_RANDOM",
			L"CALOP_RANDOMF",
			L"CALOP_ABS",
			L"CALOP_CLAMP",
			L"CALOP_MAX",
			L"CALOP_MIN",
			L"CALOP_SIGN",
			L"CALOP_FLOOR",
			L"CALOP_CEIL",
			L"CALOP_ROUND",
		};
	};
};

#endif
