
	Base Coding

		typedef's use.

			Every template class must been typedef before it been used. In include the code in container class internal.

		Use algorithm instead of 'for', for example : use GAIA::ALGORITHM::find instead of 'for' traversal.

		The return value will been a pointer type, the function parameter will been a reference type.


	GAIA

		Concept Reference

			Pipeline:

				1.Metal Mill or UE3 shader system. The node have a thumbnailed render result view.

			Resource File Management:

				1.UE3 and Unity3D's resource file asset system.

			Shader System.

				1.Matel mill or UE3 node based shader system.

			UI System.

				1.The UI can been scaled.

			Action Animation.

				1.Action Displacement Drive.

			Shadow System.

				1.Multi-Light shadow cast.


	MESSIAH

		[Data Structure And Algorithm]

		[File]
			user(binary=user) : fileflag + version + user_count * {name + password + groupcount * {groupid}}
				-fully loaded and fully rewrite.
			group(binary=group) : fileflag + version + group_count * {groupname + groupid + rightcount * {righttype + author}}
				-fully loaded and fully rewrite.
			fileindex(binary=fileindex) : fileflag + version + filecount * {filename + startime + endtime}
			logtimeindex(binary=lti_author_time) : fileflag + version + size(index file specified log content total size) + count * {time + fileoffset}
			binlog(binary=bl_author_time) : fileflag + version + {time + author + key + pid + text} + logcount
				-pid = (client's ip address's last part) % 256.
			config(text=config) : administrator's_password + total_log_count + total_size

		[Log]
			time + author + key + text
			time = year + month + day + hour + minute + second + msecond
			key = string key
			text = any text

		[Memory]
			account set(BasicSet)
			{
				account name
				password
				group list(BasicVector)
			}
			group set(BasicSet)
			{
				account list(BasicVector)
				author set(BasicSet)
				{
					author name
					right
				}
			}
			author cache set(BasicSet)
			{
				time section set(BasicSet)
				{
					time section trietree(BasicTrieTree)
					time section key trietree(BasicTrieTree)
					start time
					end time
					last access time
					isloaded ? exist pLogList(BasicVector*) : pLogList is invalid.
				}
				file time section set(BasicSet)
				{
					start time
					end time
				}
			}

		[Message]
			all text message communication.

			write log procedure message(enum all branch).
				c2s : 'noop\r\n'
				s2c : 'noop\r\n'
				c2s : 'login username password\r\n'
				s2c : 'pwderr\r\n'
				c2s : 'logout\r\n'
				s2c : 'goodbye\r\n'
				s2c : 'welcome\r\n'
				c2s : 'log time author key text\r\n'
					- 'time' 'author' 'key' 'text' can be 'x'.\
					- it means that the property is not changed. it is same to latest one.
				c2s : 'filter filterindex author authorname\r\n'
				c2s : 'filter filterindex key keyname\r\n'
				c2s : 'filter filterindex year-month-day-hour-minute-second-msecond year-month-day-hour-minute-second-msecond\r\n'
					- any time can been a 'x', ex : 'filter 0 x-x-x-12-x-x x-x-x-14-x-x\r\n'\
					- means each log occured from 12 hour to 14 hour will been filtered.
				c2s : 'filter filterindex text text\r\n'
				c2s : 'query filterindex1|filterindex2|... |filterindexn\r\n'(n < 16)
				s2c : 'fbd\r\n'
				s2c : 'log time author key pid text\r\n'
					- 'time' 'author' 'key' 'text' can be 'x'.\
					- it means that the property is not changed. it is same to latest one.
				c2s : 'cancelquery\r\n'
				s2c : 'ok\r\n'

			account management procedure message(enum seperate function all branch).
				c2s : 'login admin adminpassword\r\n'
				s2c : 'welcome\r\n'
				c2s : 'regacc name password\r\n'
				c2s : 'pwd accname newpassword\r\n'
				s2c : 'ok\r\n'
				c2s : 'unregacc name\r\n'
				s2c : 'ok\r\n'
				c2s : 'freezeacc name\r\n'
				s2c : 'ok\r\n'
				c2s : 'activeacc name\r\n'
				s2c : 'ok\r\n'
				c2s : 'reggroup name\r\n'
				s2c : 'ok\r\n'
				c2s : 'unreggroup name\r\n'
				s2c : 'ok\r\n'
				c2s : 'freezegroup name\r\n'
				s2c : 'ok\r\n'
				c2s : 'unfreezegroup name\r\n'
				s2c : 'ok\r\n'
				c2s : 'right groupname right\r\n'
				s2c : 'ok\r\n'
				c2s : 'unright groupname right\r\n'
				s2c : 'ok\r\n'
				c2s : 'join acc group'
				c2s : 'ok\r\n'
				c2s : 'leave acc group'
				c2s : 'ok\r\n'
				c2s : 'listgroup\r\n'
				s2c : 'name1 name2 ... namen\r\n'
				c2s : 'listgroupmem\r\n'
				s2c : 'name1 name2 ... namen\r\n'
				c2s : 'listright group\r\n'
				s2c : 'right1 right2 ... rightn\r\n'
				c2s : 'listacc\r\n'
				s2c : 'name1 name2 ... namen\r\n'
				c2s : 'logout\r\n'
				s2c : 'goodbye\r\n'

			server management procedure message(enum seperate function all branch).
				c2s : 'login admin adminpassword\r\n'
				s2c : 'welcome\r\n'
				c2s : 'status\r\n'
				s2c : 'linkcount:n logcount:n logsize:n/%d%%(mb) memsize = n/%d%%(mb)\r\n'
				c2s : 'shutdown\r\n'
				s2c : 'ok\r\n'
				c2s : 'restart\r\n'
				s2c : 'ok\r\n'

			other c2s operation failed will return s2c : 'failed\r\n' or 'fbd\r\n', fbd means 'forbid' and occured when right not match.

		[Right]
			admin : all right. 
			read author | $ : read specified author's log. $ means all authors.
			write author | $ : write specified author's log. $ means all authors.
			status : only have the server status watch right.

		[Multi Server Balance]
			Every server can link to multi branch server. The parent server will send all c2s message to branch server.
			The	branch server work like parent server but only c2s log request.

			when a server dispatch c2s message. total_branch_server / (total_branch_server + 1)'s message will been send\
			to branch server(BY SYNC MODE!)(total_branch_server include the branch's branch server etc).

			Selected server index = int_hash(filters) % branch_server_count.

		[Algorithm Analyze]
			Declaration:
				FCC = find charactor count.
				CCPL = charactor per log.
				AC = account count.
				AGC = account group count.
				GC = group count.
				GAC = group author count.
				CAUC = cached author count.
				CAUTSC = cached author time section count.
				IFRC = index file record count.
				BFLC = bin file log count.
				RS = read bytes from disk.

			RightCheck's O(n)
				RCO(n) = AGC * log2(GAC)

			CacheSingleLog's O(n)
				CSLO(n) = log2(CAUC) * log2(CAUTSC)

			WriteLog's O(n)
				WLO(n) = RCO(n) + CSLO(n)

			LogSecionRequest's O(n)
				LSRO(n) = log2(AC) + log2(CAUC) + log2(CAUTSC) * 2 + log2(IFRC) * 2 + RS

			LogSectionCache's O(n)
				LSC(n) = 

			QueryLog's O(n)	
				QLO(n) = RCO(n) + 

		
		[Special Feature]
			Difference log write. Log : "Hello world Tom!" and log "Hello world Jerry!". Only Jerry word will been write.
			Word translate to id. Log : "Hello world Tom!" will been translate to "Handle1 Handle2 Handle3!",\
			'Hello' 'world' and 'Tom!' will been insert to Word Balance Tree.(For share access.)


	[PROMETHEUS]

		Prometheus is a common network redirection server.

	[MNEMOSYNE]

		MNEMOSYNE is a storage system.

		[Main Features]

			

	[ATHENA]

		ATHENA is a database system.

		[Main Features]

			Abstract data transport supported.

			Data change reflection supported.

			Transaction supported.

			Sub version supported.

			Right management.










